{"version":3,"file":"/js/index.js","mappings":"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","sources":["webpack://tictactoe-laravel-mix/webpack/runtime/chunk loaded","webpack://tictactoe-laravel-mix/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/idb/build/wrap-idb-value.js","webpack://tictactoe-laravel-mix/./node_modules/idb/build/index.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/firebase/app/dist/index.esm.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://tictactoe-laravel-mix/./src/js/modules/firebaseConnection.js","webpack://tictactoe-laravel-mix/./src/js/modules/others.js","webpack://tictactoe-laravel-mix/./src/js/modules/header.js","webpack://tictactoe-laravel-mix/./src/js/index.js","webpack://tictactoe-laravel-mix/./src/js/modules/rooms.js","webpack://tictactoe-laravel-mix/./src/js/modules/table.js","webpack://tictactoe-laravel-mix/./node_modules/process/browser.js","webpack://tictactoe-laravel-mix/webpack/bootstrap","webpack://tictactoe-laravel-mix/webpack/runtime/global","webpack://tictactoe-laravel-mix/webpack/runtime/hasOwnProperty shorthand","webpack://tictactoe-laravel-mix/webpack/runtime/jsonp chunk loading","webpack://tictactoe-laravel-mix/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.26\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.8.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.8.3\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { initializeApp } from 'firebase/app';\r\nimport { getDatabase, ref, onValue, set, off, get, push, onDisconnect, query, orderByChild, limitToLast } from 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDeFAdB3GFB42kQ7SAHtKkV3-zrFGNZhVY\",\r\n    authDomain: \"snake-49526.firebaseapp.com\",\r\n    databaseURL: \"https://snake-49526-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"snake-49526\",\r\n    storageBucket: \"snake-49526.appspot.com\",\r\n    messagingSenderId: \"332569583266\",\r\n    appId: \"1:332569583266:web:3b047050ea19f9280541fb\",\r\n    measurementId: \"G-8VPYTMEFEG\"\r\n};\r\nconst app = initializeApp(firebaseConfig)\r\nconst db = getDatabase()\r\n\r\nexport { db, ref, onValue, set, off, get, push, onDisconnect, query, orderByChild, limitToLast }","// Overwrite default alert\r\nlet timerId\r\nconst alertBlock = document.getElementById('alert')\r\nexport default function myAlert(message, red) {\r\n    alertBlock.innerHTML = message\r\n    alertBlock.style.top = '40px'\r\n    alertBlock.style.backgroundColor = red ? '#dfc9c9' : '#ccdfc9'\r\n    clearTimeout(timerId)\r\n    timerId = setTimeout(() => alertBlock.style.top = '-100px', 3000)\r\n}\r\n\r\n// Mobile browsers top placeholder fix\r\nwindow.addEventListener('resize', () => {\r\n    document.body.style.height = window.innerHeight + 'px'\r\n})\r\ndocument.body.style.height = window.innerHeight + 'px'","export default function header(db, ref, set, get, myAlert) {\r\n    \r\n    const loginWrapper = document.querySelector('.login_wrapper')\r\n    const loginBtn = document.querySelector('.login_button')\r\n    const registerBtn = document.querySelector('.register_button')\r\n    const formsOverlay = document.querySelector('.forms_overlay')\r\n    const loginForm = document.querySelector('.login_form')\r\n    const registerForm = document.querySelector('.register_form')\r\n    const passRecoveryBtn = document.getElementById('pass_recovery')\r\n    const passRecoveryForm = document.querySelector('.pass_recovery_form')\r\n    const loginInfo = document.querySelector('.login_info')\r\n    const loginInfoNick = loginInfo.querySelector('.nickname')\r\n    const logoutBtn = loginInfo.querySelector('.logout')\r\n    const backBtn = document.querySelector('.back_button')\r\n    const playerStats = loginInfo.querySelectorAll('.player_stats_item_value')\r\n\r\n    function authCheck() {\r\n        const login = localStorage.getItem('login')\r\n        if (login) {\r\n            loginWrapper.style.display = 'none'\r\n            loginInfo.style.display = 'flex'\r\n            loginInfoNick.innerHTML = login\r\n        } else {\r\n            loginWrapper.style.display = 'flex'\r\n            loginInfo.style.display = 'none'\r\n            loginInfoNick.innerHTML = ''\r\n        }\r\n    }\r\n    authCheck()\r\n    window.addEventListener('storage', authCheck)\r\n\r\n    function backBtnVisibility() {\r\n        if (window.location.pathname === '/1/') {\r\n            backBtn.style.visibility = 'hidden'\r\n        } else {\r\n            backBtn.style.visibility = 'visible'\r\n        }\r\n    }\r\n    backBtnVisibility()\r\n\r\n    function formData(form) {\r\n        const data = {}\r\n        new FormData(form).forEach((val, key) => data[key] = val.trim())\r\n        return data\r\n    }\r\n\r\n    function successSubmitActions(form, login) {\r\n        localStorage.setItem('login', login)\r\n        if (window.location.pathname.includes('room.html')) window.location.reload()\r\n        form.submit.disabled = false\r\n        loginInfo.style.display = 'flex'\r\n        loginInfo.style.visibility = 'visible'\r\n        formsOverlay.style.visibility = 'hidden'\r\n        form.style.visibility = 'hidden'\r\n        form.style.opacity = '0'\r\n        form.reset()\r\n        authCheck()\r\n    }\r\n\r\n    function renderPlayerStats() {\r\n        if (!localStorage.getItem('login')) return\r\n        const nick = localStorage.getItem('login').toLowerCase()\r\n        get(ref(db, `tictac/registeredUsers/${nick}`)).then(snap => {\r\n            let winsPercent = (snap.val().wins/(snap.val().parties/100)).toPrecision(2)\r\n            if (isNaN(winsPercent)) winsPercent = 0\r\n            if (snap.exists()) {\r\n                playerStats[0].innerHTML = snap.val().parties\r\n                playerStats[1].innerHTML = `${winsPercent}%`\r\n                playerStats[2].innerHTML = snap.val().wins\r\n                playerStats[3].innerHTML = snap.val().draws\r\n                playerStats[4].innerHTML = snap.val().losses\r\n            } else {\r\n                playerStats.forEach(item => item.innerHTML = 'error')\r\n            }\r\n        })\r\n    }\r\n\r\n    loginInfo.addEventListener('mouseenter', () => {\r\n        renderPlayerStats()\r\n    })\r\n\r\n    loginBtn.addEventListener('click', () => {\r\n        formsOverlay.classList.add('form_active')\r\n        loginForm.classList.add('form_active')\r\n        registerForm.classList.remove('form_active')\r\n        passRecoveryForm.classList.remove('form_active')\r\n        setTimeout(() => loginForm.querySelector('input').focus(), 300)\r\n    })\r\n\r\n    registerBtn.addEventListener('click', () => {\r\n        formsOverlay.classList.add('form_active')\r\n        registerForm.classList.add('form_active')\r\n        loginForm.classList.remove('form_active')\r\n        passRecoveryForm.classList.remove('form_active')\r\n        setTimeout(() => registerForm.querySelector('input').focus(), 300)\r\n    })\r\n\r\n    formsOverlay.addEventListener('click', () => {\r\n        formsOverlay.classList.remove('form_active')\r\n        loginForm.classList.remove('form_active')\r\n        registerForm.classList.remove('form_active')\r\n        passRecoveryForm.classList.remove('form_active')\r\n    })\r\n\r\n    passRecoveryBtn.addEventListener('click', () => {\r\n        formsOverlay.classList.add('form_active')\r\n        passRecoveryForm.classList.add('form_active')\r\n        loginForm.classList.remove('form_active')\r\n        setTimeout(() => passRecoveryForm.querySelector('input').focus(), 300)\r\n    })\r\n\r\n    logoutBtn.addEventListener('click', () => {\r\n        if (window.location.pathname.includes('room.html')) window.location.reload()\r\n        localStorage.removeItem('login')\r\n        authCheck()\r\n        myAlert('Вы успешно вышли')\r\n    })\r\n\r\n    registerForm.addEventListener('submit', function (e) {\r\n        e.preventDefault()\r\n        const data = formData(this)\r\n        data.parties = 0\r\n        data.wins = 0\r\n        data.draws = 0\r\n        data.losses = 0\r\n        this.submit.disabled = true\r\n        get(ref(db, `tictac/registeredUsers/${data.login.toLowerCase()}`)).then(snap => {\r\n            if (snap.exists()) {\r\n                this.submit.disabled = false\r\n                myAlert('Такой ник уже занят', true)\r\n            } else {\r\n                set(ref(db, `tictac/registeredUsers/${data.login.toLowerCase()}`), data)\r\n                .then(() => {\r\n                    successSubmitActions(this, data.login)\r\n                    myAlert('Вы успешно зарегистрировались!')\r\n                })\r\n                .catch(err => {\r\n                    this.submit.disabled = false\r\n                    console.log('Ошибка регистрации ', err)\r\n                    myAlert('Что-то пошло не так', true)\r\n                })\r\n            }\r\n        })\r\n    })\r\n\r\n    loginForm.addEventListener('submit', function (e) {\r\n        e.preventDefault()\r\n        const data = formData(this)\r\n        this.submit.disabled = true\r\n        get(ref(db, `tictac/registeredUsers/${data.login.toLowerCase()}`)).then(snap => {\r\n            if (snap.exists()) {\r\n                if (snap.val().password == data.password) {\r\n                    successSubmitActions(this, snap.val().login)\r\n                    myAlert('Вы успешно вошли!')\r\n                } else {\r\n                    this.submit.disabled = false\r\n                    myAlert('Неверный пароль', true)\r\n                }\r\n            } else {\r\n                this.submit.disabled = false\r\n                myAlert('Такого пользователя не существует', true)\r\n            }\r\n        })\r\n    })\r\n\r\n    passRecoveryForm.addEventListener('submit', function (e) {\r\n        e.preventDefault()\r\n        this.submit.disabled = true\r\n        const nickName = this.login.value.trim()\r\n        const mailTimeOut = +localStorage.getItem('mailTimeOut')\r\n        get(ref(db, `tictac/registeredUsers/${nickName.toLowerCase()}`)).then(snap => {\r\n            if (snap.exists() && snap.val().email) {\r\n                if (Date.now() > mailTimeOut) {\r\n                    Email.send({\r\n                        SecureToken : \"6c3d7ad6-0ad0-418d-833e-07b4885f5490\",\r\n                        To : snap.val().email,\r\n                        From : \"xaker6444@gmail.com\",\r\n                        Subject : 'Восстановление пароля в \"Крестики-нолики\"',\r\n                        Body : `<h1>Ваш пароль: ${snap.val().password}</h1>`\r\n                    }).then(message => {\r\n                        if (message == 'OK') {\r\n                            passRecoveryForm.classList.remove('form_active')\r\n                            this.submit.disabled = false\r\n                            localStorage.setItem('mailTimeOut', new Date().getTime() + 120 * 1000)\r\n                            myAlert('Пароль успешно отправлен на почту')\r\n                        } else {\r\n                            this.submit.disabled = false\r\n                            console.log('Ошибка отправки пароля', message)\r\n                            myAlert('Ошибка отправки пароля', true)\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.submit.disabled = false\r\n                    myAlert('Вы уже отправляли письмо менее 2-х минут назад', true)\r\n                }\r\n            } else if (snap.exists() && !snap.val().email) {\r\n                this.submit.disabled = false\r\n                myAlert('Почтовый адрес не был указан при регистрации', true)\r\n            } else if (!snap.exists()) {\r\n                this.submit.disabled = false\r\n                myAlert('Такого пользователя не существует', true)\r\n            }\r\n        })\r\n    })\r\n\r\n    /* SmtpJS.com - v3.0.0 */\r\n    var Email = {\r\n      send: function (a) {\r\n        return new Promise(function (n, e) {\r\n          (a.nocache = Math.floor(1e6 * Math.random() + 1)),\r\n            (a.Action = \"Send\");\r\n          var t = JSON.stringify(a);\r\n          Email.ajaxPost(\"https://smtpjs.com/v3/smtpjs.aspx?\", t, function (e) {\r\n            n(e);\r\n          });\r\n        });\r\n      },\r\n      ajaxPost: function (e, n, t) {\r\n        var a = Email.createCORSRequest(\"POST\", e);\r\n        a.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"),\r\n          (a.onload = function () {\r\n            var e = a.responseText;\r\n            null != t && t(e);\r\n          }),\r\n          a.send(n);\r\n      },\r\n      ajax: function (e, n) {\r\n        var t = Email.createCORSRequest(\"GET\", e);\r\n        (t.onload = function () {\r\n          var e = t.responseText;\r\n          null != n && n(e);\r\n        }),\r\n          t.send();\r\n      },\r\n      createCORSRequest: function (e, n) {\r\n        var t = new XMLHttpRequest();\r\n        return (\r\n          \"withCredentials\" in t\r\n            ? t.open(e, n, !0)\r\n            : \"undefined\" != typeof XDomainRequest\r\n            ? (t = new XDomainRequest()).open(e, n)\r\n            : (t = null),\r\n          t\r\n        );\r\n      },\r\n    };\r\n\r\n}\r\n","//// Modules ////\r\nimport { db, ref, onValue, set, off, get, query, orderByChild, limitToLast } from './modules/firebaseConnection';\r\nimport header from './modules/header';\r\nimport rooms from './modules/rooms';\r\nimport table from './modules/table';\r\nimport myAlert from './modules/others';\r\n\r\nheader(db, ref, set, get, myAlert)\r\nrooms(db, ref, set, onValue, off)\r\ntable(db, ref, get, query, orderByChild, limitToLast)\r\n\r\n","export default function rooms(db, ref, set, onValue, off) {\r\n\r\n    const rooms = document.querySelector('.rooms')\r\n    const createRoomBtn = document.getElementById('create_room')\r\n    const createRoomPopup = document.querySelector('.create_room_popup')\r\n    const cancelBtn = createRoomPopup.querySelector('button:last-child')\r\n    const roomName = createRoomPopup.querySelector('input')\r\n    const onlineBtn = document.querySelector('.game_mod:last-child')\r\n    const onlineModeBtn = document.querySelector('.online_mod')\r\n\r\n    function listenRooms() {\r\n        onValue(ref(db, 'tictac/rooms'), (snap) => {\r\n            rooms.innerHTML = ''\r\n            Object.keys(snap.val()).forEach(key => {\r\n                let plAmount = 0\r\n                if (snap.val()[key].players) plAmount = Object.keys(snap.val()[key].players).length\r\n                rooms.innerHTML += `\r\n                    <a class=\"room\" href=\"room.html?${key}\">\r\n                        <div>${key}</div>\r\n                        <div>Игроков: ${plAmount}/2</div>\r\n                    </a>\r\n                `\r\n            })\r\n        })\r\n    }\r\n\r\n    function roomPopupSwitch(state) {\r\n        if (state == 'open') {\r\n            createRoomPopup.style.opacity = '1'\r\n            createRoomPopup.style.left = '50%'\r\n        } else if (state == 'close') {\r\n            createRoomPopup.style.opacity = '0'\r\n            createRoomPopup.style.left = '-100%'\r\n            setTimeout(() => roomName.value = '', 300)\r\n        }\r\n    }\r\n\r\n    createRoomBtn.addEventListener('click', () => {\r\n        roomPopupSwitch('open')\r\n        roomName.focus()\r\n    })\r\n\r\n    cancelBtn.addEventListener('click', () => {\r\n        roomPopupSwitch('close')\r\n    })\r\n\r\n    createRoomPopup.addEventListener('submit', (e) => {\r\n        e.preventDefault()\r\n        let roomNameTrimed = roomName.value.trim()\r\n        if (roomNameTrimed) {\r\n            set(ref(db, `tictac/rooms/${roomNameTrimed}/gameState`), {\r\n                0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '',\r\n                turn: 'x',\r\n                gameOver: 'false'\r\n            })\r\n        }\r\n        roomPopupSwitch('close')\r\n    })\r\n\r\n    onlineBtn.addEventListener('click', () => {\r\n        if (onlineModeBtn.style.maxHeight != '240px') {\r\n            onlineModeBtn.style.maxHeight = '240px'\r\n            listenRooms()\r\n        } else {\r\n            setTimeout(() => rooms.innerHTML = 'Загрузка...', 600)\r\n            onlineModeBtn.style.maxHeight = '0px'\r\n            off(ref(db, 'tictac/rooms'))\r\n        }\r\n    })\r\n\r\n}","export default function table(db, ref, get, query, orderByChild, limitToLast) {\r\n    const table = document.querySelector('.leaders_table tbody')\r\n    const playerStats = document.querySelectorAll('.player_stats_item_value')\r\n    const playerStatsPopup = document.querySelector('.player_stats')\r\n    const loginInfo = document.querySelector('.login_info')\r\n    let tdNicks\r\n\r\n    const list = query(ref(db, `tictac/registeredUsers/`), orderByChild('wins'), limitToLast(10))\r\n    get(list).then(snap => {\r\n        const users = [];\r\n        snap.forEach(childSnap => {users.push(childSnap.val())})\r\n        users.reverse().forEach((user, idx) => {\r\n            table.innerHTML += `<tr>\r\n                <td>${++idx}</td>\r\n                <td class=\"nick\">${user.login}</td>\r\n                <td>${user.wins}</td>\r\n            </tr>`\r\n        })\r\n        tdNicks = document.querySelectorAll('.nick')\r\n        tdNicks.forEach(td => {\r\n            td.onmouseenter = e => {\r\n                if (loginInfo.style.display == 'none') {\r\n                    loginInfo.style.display = 'flex'\r\n                    loginInfo.style.visibility = 'hidden'\r\n                }\r\n                playerStatsPopup.style.visibility = 'visible'\r\n                playerStatsPopup.style.opacity = '1'\r\n                playerStatsPopup.style.top = 40 + e.target.getBoundingClientRect().top + 'px'\r\n                playerStatsPopup.style.right = -110 + e.target.getBoundingClientRect().left + 'px'\r\n                if (e.target.classList.contains('nick')) {\r\n                    let nick = e.target.innerText.toLowerCase()\r\n                    get(ref(db, `tictac/registeredUsers/${nick}`)).then(snap => {\r\n                        let winsPercent = (snap.val().wins/(snap.val().parties/100)).toPrecision(2)\r\n                        if (isNaN(winsPercent)) winsPercent = 0\r\n                        if (snap.exists()) {\r\n                            playerStats[0].innerHTML = snap.val().parties\r\n                            playerStats[1].innerHTML = `${winsPercent}%`\r\n                            playerStats[2].innerHTML = snap.val().wins\r\n                            playerStats[3].innerHTML = snap.val().draws\r\n                            playerStats[4].innerHTML = snap.val().losses\r\n                        } else {\r\n                            playerStats.forEach(item => item.innerHTML = 'error')\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            td.onmouseleave = () => {\r\n                playerStatsPopup.style.visibility = ''\r\n                playerStatsPopup.style.opacity = ''\r\n                playerStatsPopup.style.top = ''\r\n                playerStatsPopup.style.right = ''\r\n            }\r\n        })\r\n    })\r\n\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t396: 0,\n\t523: 0,\n\t172: 0,\n\t425: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktictactoe_laravel_mix\"] = self[\"webpackChunktictactoe_laravel_mix\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\n__webpack_require__.O(undefined, [523,172,425], () => (__webpack_require__(55)))\n__webpack_require__.O(undefined, [523,172,425], () => (__webpack_require__(265)))\n__webpack_require__.O(undefined, [523,172,425], () => (__webpack_require__(301)))\nvar __webpack_exports__ = __webpack_require__.O(undefined, [523,172,425], () => (__webpack_require__(162)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","CONSTANTS","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","reject","resolve","promise","Promise","wrapCallback","callback","catch","getUA","navigator","isMobileCordova","window","test","isNodeSdk","FirebaseError","code","customData","super","name","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","obj","call","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","apply","unwrap","storeNames","tx","sort","transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","request","success","result","then","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","_getProvider","heartbeatController","triggerHeartbeat","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","self","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","idbHeartbeatObject","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","enableLogging$1","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","_path","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsOrderBy","queryParams","newParams","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queryKey","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","_checkNotDeleted","_root","cached","err","repoGetValue","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","QueryConstraint","QueryLimitToLastConstraint","_limit","_apply","newLimit","queryParamsLimitToLast","QueryOrderByChildConstraint","parsedPath","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoManagerDeleteRepo","apiName","simpleListen","echo","onEcho","setSDKVersion","registerDatabase","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","timerId","getApp","getDatabase","alertBlock","getElementById","height","innerHeight","myAlert","loginWrapper","querySelector","loginBtn","registerBtn","formsOverlay","loginForm","registerForm","passRecoveryBtn","passRecoveryForm","loginInfo","loginInfoNick","logoutBtn","backBtn","playerStats","querySelectorAll","authCheck","login","localStorage","formData","form","FormData","trim","successSubmitActions","pathname","reload","submit","disabled","visibility","opacity","nick","winsPercent","wins","parties","toPrecision","draws","losses","item","renderPlayerStats","classList","focus","preventDefault","nickName","mailTimeOut","email","Email","SecureToken","To","From","Subject","Body","nocache","Action","ajaxPost","createCORSRequest","setRequestHeader","ajax","XDomainRequest","red","top","backgroundColor","rooms","createRoomBtn","createRoomPopup","cancelBtn","roomName","onlineBtn","onlineModeBtn","roomPopupSwitch","state","roomNameTrimed","turn","gameOver","maxHeight","plAmount","players","expCallback","orderByChild","limitToLast","table","playerStatsPopup","list","users","user","td","onmouseenter","getBoundingClientRect","contains","innerText","onmouseleave","queryConstraints","queryImpl","constraint","limit","cachedSetTimeout","cachedClearTimeout","module","exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","noop","nextTick","arguments","title","browser","argv","versions","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","O","chunkIds","notFulfilled","fulfilled","g","globalThis","Function","o","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}