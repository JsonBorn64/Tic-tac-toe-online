{"version":3,"file":"/js/single.js","mappings":"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","sources":["webpack://tictactoe-laravel-mix/./node_modules/process/browser.js","webpack://tictactoe-laravel-mix/webpack/bootstrap","webpack://tictactoe-laravel-mix/webpack/runtime/global","webpack://tictactoe-laravel-mix/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/idb/build/wrap-idb-value.js","webpack://tictactoe-laravel-mix/./node_modules/idb/build/index.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://tictactoe-laravel-mix/./node_modules/firebase/app/dist/index.esm.js","webpack://tictactoe-laravel-mix/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://tictactoe-laravel-mix/./src/js/modules/firebaseConnection.js","webpack://tictactoe-laravel-mix/./src/js/modules/others.js","webpack://tictactoe-laravel-mix/./src/js/modules/header.js","webpack://tictactoe-laravel-mix/./src/js/single.js"],"sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.26\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.8.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.8.3\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { initializeApp } from 'firebase/app';\r\nimport { getDatabase, ref, onValue, set, off, get, push, onDisconnect } from 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDeFAdB3GFB42kQ7SAHtKkV3-zrFGNZhVY\",\r\n    authDomain: \"snake-49526.firebaseapp.com\",\r\n    databaseURL: \"https://snake-49526-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"snake-49526\",\r\n    storageBucket: \"snake-49526.appspot.com\",\r\n    messagingSenderId: \"332569583266\",\r\n    appId: \"1:332569583266:web:3b047050ea19f9280541fb\",\r\n    measurementId: \"G-8VPYTMEFEG\"\r\n};\r\nconst app = initializeApp(firebaseConfig)\r\nconst db = getDatabase()\r\n\r\nexport { db, ref, onValue, set, off, get, push, onDisconnect }","// Overwrite default alert\r\nlet timerId\r\nconst alertBlock = document.getElementById('alert')\r\nexport default function myAlert(message, red) {\r\n    alertBlock.innerHTML = message\r\n    alertBlock.style.top = '40px'\r\n    alertBlock.style.backgroundColor = red ? '#dfc9c9' : '#ccdfc9'\r\n    clearTimeout(timerId)\r\n    timerId = setTimeout(() => alertBlock.style.top = '-100px', 3000)\r\n}\r\n\r\n// Mobile browsers top placeholder fix\r\nwindow.addEventListener('resize', () => {\r\n    document.body.style.height = window.innerHeight + 'px'\r\n})\r\ndocument.body.style.height = window.innerHeight + 'px'","export default function header(db, ref, set, get, myAlert) {\r\n    \r\n    const loginWrapper = document.querySelector('.login_wrapper')\r\n    const loginBtn = document.querySelector('.login_button')\r\n    const registerBtn = document.querySelector('.register_button')\r\n    const formsOverlay = document.querySelector('.forms_overlay')\r\n    const loginForm = document.querySelector('.login_form')\r\n    const registerForm = document.querySelector('.register_form')\r\n    const passRecoveryBtn = document.getElementById('pass_recovery')\r\n    const passRecoveryForm = document.querySelector('.pass_recovery_form')\r\n    const loginInfo = document.querySelector('.login_info')\r\n    const loginInfoNick = loginInfo.querySelector('.nickname')\r\n    const logoutBtn = loginInfo.querySelector('.logout')\r\n    const backBtn = document.querySelector('.back_button')\r\n    const playerStats = loginInfo.querySelectorAll('.player_stats_item_value')\r\n\r\n    function authCheck() {\r\n        const login = localStorage.getItem('login')\r\n        if (login) {\r\n            loginWrapper.style.display = 'none'\r\n            loginInfo.style.display = 'flex'\r\n            loginInfoNick.innerHTML = login\r\n        } else {\r\n            loginWrapper.style.display = 'flex'\r\n            loginInfo.style.display = 'none'\r\n            loginInfoNick.innerHTML = ''\r\n        }\r\n    }\r\n    authCheck()\r\n    window.addEventListener('storage', authCheck)\r\n\r\n    function backBtnVisibility() {\r\n        if (window.location.pathname === '/1/') {\r\n            backBtn.style.visibility = 'hidden'\r\n        } else {\r\n            backBtn.style.visibility = 'visible'\r\n        }\r\n    }\r\n    backBtnVisibility()\r\n\r\n    function formData(form) {\r\n        const data = {}\r\n        new FormData(form).forEach((val, key) => data[key] = val.trim())\r\n        return data\r\n    }\r\n\r\n    function successSubmitActions(form, login) {\r\n        localStorage.setItem('login', login)\r\n        if (window.location.pathname.includes('room.html')) window.location.reload()\r\n        form.submit.disabled = false\r\n        formsOverlay.style.visibility = 'hidden'\r\n        form.style.visibility = 'hidden'\r\n        form.style.opacity = '0'\r\n        form.reset()\r\n        authCheck()\r\n    }\r\n\r\n    function renderPlayerStats() {\r\n        const nick = localStorage.getItem('login').toLowerCase()\r\n        get(ref(db, `tictac/registeredUsers/${nick}`)).then(snap => {\r\n            let winsPercent = (snap.val().wins/(snap.val().parties/100)).toPrecision(2)\r\n            if (isNaN(winsPercent)) winsPercent = 0\r\n            if (snap.exists()) {\r\n                playerStats[0].innerHTML = snap.val().parties\r\n                playerStats[1].innerHTML = `${winsPercent}%`\r\n                playerStats[2].innerHTML = snap.val().wins\r\n                playerStats[3].innerHTML = snap.val().draws\r\n                playerStats[4].innerHTML = snap.val().losses\r\n            } else {\r\n                playerStats.forEach(item => item.innerHTML = 'error')\r\n            }\r\n        })\r\n    }\r\n\r\n    loginInfo.addEventListener('mouseenter', () => {\r\n        renderPlayerStats()\r\n    })\r\n\r\n    loginBtn.addEventListener('click', () => {\r\n        formsOverlay.classList.add('form_active')\r\n        loginForm.classList.add('form_active')\r\n        registerForm.classList.remove('form_active')\r\n        passRecoveryForm.classList.remove('form_active')\r\n        setTimeout(() => loginForm.querySelector('input').focus(), 300)\r\n    })\r\n\r\n    registerBtn.addEventListener('click', () => {\r\n        formsOverlay.classList.add('form_active')\r\n        registerForm.classList.add('form_active')\r\n        loginForm.classList.remove('form_active')\r\n        passRecoveryForm.classList.remove('form_active')\r\n        setTimeout(() => registerForm.querySelector('input').focus(), 300)\r\n    })\r\n\r\n    formsOverlay.addEventListener('click', () => {\r\n        formsOverlay.classList.remove('form_active')\r\n        loginForm.classList.remove('form_active')\r\n        registerForm.classList.remove('form_active')\r\n        passRecoveryForm.classList.remove('form_active')\r\n    })\r\n\r\n    passRecoveryBtn.addEventListener('click', () => {\r\n        formsOverlay.classList.add('form_active')\r\n        passRecoveryForm.classList.add('form_active')\r\n        loginForm.classList.remove('form_active')\r\n        setTimeout(() => passRecoveryForm.querySelector('input').focus(), 300)\r\n    })\r\n\r\n    logoutBtn.addEventListener('click', () => {\r\n        if (window.location.pathname.includes('room.html')) window.location.reload()\r\n        localStorage.removeItem('login')\r\n        authCheck()\r\n        myAlert('Вы успешно вышли')\r\n    })\r\n\r\n    registerForm.addEventListener('submit', function (e) {\r\n        e.preventDefault()\r\n        const data = formData(this)\r\n        data.parties = 0\r\n        data.wins = 0\r\n        data.draws = 0\r\n        data.losses = 0\r\n        this.submit.disabled = true\r\n        get(ref(db, `tictac/registeredUsers/${data.login.toLowerCase()}`)).then(snap => {\r\n            if (snap.exists()) {\r\n                this.submit.disabled = false\r\n                myAlert('Такой ник уже занят', true)\r\n            } else {\r\n                set(ref(db, `tictac/registeredUsers/${data.login.toLowerCase()}`), data)\r\n                .then(() => {\r\n                    successSubmitActions(this, data.login)\r\n                    myAlert('Вы успешно зарегистрировались!')\r\n                })\r\n                .catch(err => {\r\n                    this.submit.disabled = false\r\n                    console.log('Ошибка регистрации ', err)\r\n                    myAlert('Что-то пошло не так', true)\r\n                })\r\n            }\r\n        })\r\n    })\r\n\r\n    loginForm.addEventListener('submit', function (e) {\r\n        e.preventDefault()\r\n        const data = formData(this)\r\n        this.submit.disabled = true\r\n        get(ref(db, `tictac/registeredUsers/${data.login.toLowerCase()}`)).then(snap => {\r\n            if (snap.exists()) {\r\n                if (snap.val().password == data.password) {\r\n                    successSubmitActions(this, snap.val().login)\r\n                    myAlert('Вы успешно вошли!')\r\n                } else {\r\n                    this.submit.disabled = false\r\n                    myAlert('Неверный пароль', true)\r\n                }\r\n            } else {\r\n                this.submit.disabled = false\r\n                myAlert('Такого пользователя не существует', true)\r\n            }\r\n        })\r\n    })\r\n\r\n    passRecoveryForm.addEventListener('submit', function (e) {\r\n        e.preventDefault()\r\n        this.submit.disabled = true\r\n        const nickName = this.login.value.trim()\r\n        const mailTimeOut = +localStorage.getItem('mailTimeOut')\r\n        get(ref(db, `tictac/registeredUsers/${nickName.toLowerCase()}`)).then(snap => {\r\n            if (snap.exists() && snap.val().email) {\r\n                if (Date.now() > mailTimeOut) {\r\n                    Email.send({\r\n                        SecureToken : \"6c3d7ad6-0ad0-418d-833e-07b4885f5490\",\r\n                        To : snap.val().email,\r\n                        From : \"xaker6444@gmail.com\",\r\n                        Subject : 'Восстановление пароля в \"Крестики-нолики\"',\r\n                        Body : `<h1>Ваш пароль: ${snap.val().password}</h1>`\r\n                    }).then(message => {\r\n                        if (message == 'OK') {\r\n                            passRecoveryForm.classList.remove('form_active')\r\n                            this.submit.disabled = false\r\n                            localStorage.setItem('mailTimeOut', new Date().getTime() + 120 * 1000)\r\n                            myAlert('Пароль успешно отправлен на почту')\r\n                        } else {\r\n                            this.submit.disabled = false\r\n                            console.log('Ошибка отправки пароля', message)\r\n                            myAlert('Ошибка отправки пароля', true)\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.submit.disabled = false\r\n                    myAlert('Вы уже отправляли письмо менее 2-х минут назад', true)\r\n                }\r\n            } else if (snap.exists() && !snap.val().email) {\r\n                this.submit.disabled = false\r\n                myAlert('Почтовый адрес не был указан при регистрации', true)\r\n            } else if (!snap.exists()) {\r\n                this.submit.disabled = false\r\n                myAlert('Такого пользователя не существует', true)\r\n            }\r\n        })\r\n    })\r\n\r\n    /* SmtpJS.com - v3.0.0 */\r\n    var Email = {\r\n      send: function (a) {\r\n        return new Promise(function (n, e) {\r\n          (a.nocache = Math.floor(1e6 * Math.random() + 1)),\r\n            (a.Action = \"Send\");\r\n          var t = JSON.stringify(a);\r\n          Email.ajaxPost(\"https://smtpjs.com/v3/smtpjs.aspx?\", t, function (e) {\r\n            n(e);\r\n          });\r\n        });\r\n      },\r\n      ajaxPost: function (e, n, t) {\r\n        var a = Email.createCORSRequest(\"POST\", e);\r\n        a.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"),\r\n          (a.onload = function () {\r\n            var e = a.responseText;\r\n            null != t && t(e);\r\n          }),\r\n          a.send(n);\r\n      },\r\n      ajax: function (e, n) {\r\n        var t = Email.createCORSRequest(\"GET\", e);\r\n        (t.onload = function () {\r\n          var e = t.responseText;\r\n          null != n && n(e);\r\n        }),\r\n          t.send();\r\n      },\r\n      createCORSRequest: function (e, n) {\r\n        var t = new XMLHttpRequest();\r\n        return (\r\n          \"withCredentials\" in t\r\n            ? t.open(e, n, !0)\r\n            : \"undefined\" != typeof XDomainRequest\r\n            ? (t = new XDomainRequest()).open(e, n)\r\n            : (t = null),\r\n          t\r\n        );\r\n      },\r\n    };\r\n\r\n}\r\n","//// Modules ////\r\nimport { db, ref, set, get } from './modules/firebaseConnection';\r\nimport header from './modules/header';\r\nimport myAlert from './modules/others';\r\nheader(db, ref, set, get, myAlert)\r\n\r\nconst cells = document.querySelectorAll('.tictac_cell')\r\nconst nowTurn = document.querySelector('.now_turn span')\r\nconst resetBtn = document.getElementById('newGame')\r\nconst popup = document.querySelector('.result_popup')\r\nconst winMessage = popup.querySelector('.win_message')\r\nconst blocked = document.querySelector('.blocked')\r\nlet turn = 'x'\r\nlet progArr\r\n\r\nfunction drawFigure(cell) {\r\n    if (cell.classList.length == 1) {\r\n        if (turn == 'x') {\r\n            cell.classList.add('cross')\r\n            nowTurn.innerHTML = turn = 'o'\r\n            nowTurn.style.color = 'red'\r\n        } else {\r\n            cell.classList.add('circle')\r\n            nowTurn.innerHTML = turn = 'x'\r\n            nowTurn.style.color = 'blue'\r\n        }\r\n    }\r\n}\r\n\r\nfunction gameProgressArr() {\r\n    progArr = [...cells].map(cell => {\r\n        if (cell.classList.contains('cross')) {\r\n            return 'x'\r\n        } else if (cell.classList.contains('circle')) {\r\n            return 'o'\r\n        } else {\r\n            return NaN\r\n        }\r\n    })\r\n}\r\n\r\nfunction winChecking() {\r\n    if (\r\n        (progArr[0] == progArr[1] && progArr[1] == progArr[2]) ||\r\n        (progArr[3] == progArr[4] && progArr[4] == progArr[5]) ||\r\n        (progArr[6] == progArr[7] && progArr[7] == progArr[8]) ||\r\n        (progArr[0] == progArr[3] && progArr[3] == progArr[6]) ||\r\n        (progArr[1] == progArr[4] && progArr[4] == progArr[7]) ||\r\n        (progArr[2] == progArr[5] && progArr[5] == progArr[8]) ||\r\n        (progArr[0] == progArr[4] && progArr[4] == progArr[8]) ||\r\n        (progArr[2] == progArr[4] && progArr[4] == progArr[6])\r\n    ) { gameOver(turn) }\r\n    else if (progArr.every(cell => (cell == 'x' || cell == 'o'))) { \r\n        winMessage.innerHTML = 'Ничья!'\r\n        winMessage.style.color = 'black'\r\n        popup.style.left = '50%'\r\n        popup.style.opacity = '1'\r\n        blocked.style.zIndex = '0'\r\n    }\r\n}\r\n\r\nfunction gameOver(turn) {\r\n    if (turn == 'x') {\r\n        winMessage.innerHTML = 'Нолики победили!'\r\n        winMessage.style.color = 'red'\r\n        popup.style.left = '50%'\r\n        popup.style.opacity = '1'\r\n        blocked.style.zIndex = '0'\r\n    } else {\r\n        winMessage.innerHTML = 'Крестики победили!'\r\n        winMessage.style.color = 'blue'\r\n        popup.style.left = '50%'\r\n        popup.style.opacity = '1'\r\n        blocked.style.zIndex = '0'\r\n    }\r\n}\r\n\r\nfunction newGame() {\r\n    cells.forEach(cell => cell.classList.remove('cross', 'circle'))\r\n    nowTurn.innerHTML = turn = 'x'\r\n    nowTurn.style.color = 'blue'\r\n    popup.style.left = '-100%'\r\n    blocked.style.zIndex = '-10'\r\n}\r\n\r\ncells.forEach(cell => { cell.onclick = () => { drawFigure(cell), gameProgressArr(), winChecking() } })\r\n\r\nresetBtn.onclick = () => { newGame() }\r\n"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","g","globalThis","Function","window","CONSTANTS","assertion","message","assertionError","stringToByteArray$1","str","out","p","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","console","error","deepCopy","value","deepExtend","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","reject","resolve","promise","Promise","wrapCallback","callback","catch","getUA","navigator","isMobileCordova","test","isNodeSdk","FirebaseError","code","customData","super","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","obj","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","tx","sort","transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","request","success","result","then","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","_getProvider","heartbeatController","triggerHeartbeat","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","self","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","idbHeartbeatObject","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","enableLogging$1","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","setTimeoutNonBlocking","time","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","context","validateEventType_","eventData","getInitialEvent","splice","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","_path","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistration","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","pathToSyncPoint","sp","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryKey","splitIndex","syncTreeApplyTaggedOperation_","queryPath","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","existing","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","validateFirebaseDataArg","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoInterrupt","toUpperCase","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","QueryImpl","_repo","_orderByCalled","ref","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","exportVal","hasChildren","_checkNotDeleted","_root","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoManagerDeleteRepo","apiName","simpleListen","echo","onEcho","setSDKVersion","registerDatabase","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","timerId","getApp","getDatabase","alertBlock","getElementById","height","innerHeight","myAlert","loginWrapper","querySelector","loginBtn","registerBtn","formsOverlay","loginForm","registerForm","passRecoveryBtn","passRecoveryForm","loginInfo","loginInfoNick","logoutBtn","backBtn","playerStats","querySelectorAll","authCheck","login","localStorage","formData","form","FormData","trim","successSubmitActions","pathname","reload","submit","disabled","visibility","opacity","nick","winsPercent","wins","parties","toPrecision","draws","losses","item","classList","focus","preventDefault","err","nickName","mailTimeOut","email","Email","SecureToken","To","From","Subject","Body","nocache","Action","ajaxPost","createCORSRequest","setRequestHeader","ajax","XDomainRequest","cached","repoGetValue","red","top","backgroundColor","progArr","cells","nowTurn","resetBtn","popup","winMessage","turn","winChecking","zIndex","gameOver","cell","onclick","drawFigure","contains","NaN"],"sourceRoot":""}